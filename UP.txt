Projekt - jedinstven poduhvat koji mora isporučiti neki rezultat
Naručitelju projekta treba: money, idea, deadline ilitiga time, budget, scope
Izvršitelju projekta treba: resursi,ljudi, money, informacije

Projekt: privremeni poduhvat koji je pokrenut kako bi se kreirao jedinstven proizvod, servis ili rezultat
Ima definiran početak i kraj
Kraj projekta -> kad su postignuti ciljevi projekta ili kad je projekt ukinut jer se ciljevi ne mogu dostići (nema potrebe za projektom)

Projekt kreira jedinstven proizvod, servis ili rezultat (opipljiv ili neopipljiv)

Proces => ponavlja se svakodnevno (npr. proces narudžbe na ebayu)
Projekt => zaseban (npr. projekt redizajna web sjedišta ebaya (kad ga jednom redizajniramo, nećemo opet)

Čak i ako u projektu ima nekih repetitivnih elemenata, to je i dalje projekt (npr. više projekata gradnje kuće ima više istih elemenata, ali i dalje je svaka gradnja kuće zaseban projekt)
Ako u projektu ima repetitivnih procesa, ključno je da je rezultat i dalje jedinstven
Prototip nečega je sigurno rezultat projekta
Svaki idući je potencijalno rezultat procesa, osim ako ne delamo značajne razlike

Upravljanje projektima: primjena znanja, vještina, alata i tehnika na projektne aktivnosti kako bi se ispunili projektni zahtjevi
Utvrditi da je svim dionicima jasan konačni cilj projekta
Bitno je planirati
Načelo 6P (proper planning prevents poor project performance)
Kompetencije članova time i vještine voditelja tima
Komunikacijski plan projekta - ča, kemu, kako?
Analiza rizika i načini kako ih izbjeći/ukloniti
Naučene lekcije

Dobro planirati
Paziti da se scope projekta ne mijenja za vrijeme izvedbe projekta (scope creep) => ne želimo da opseg nekontrolirano rast
Najčešći tunable parametri su time and money 
Koristiti PM tools

Želimo minimizirati troškove :)
TRL -> technical readiness level


---

### **TRL 1 — Basic principles observed**

* Početak svega.
* Ideja je tek u fazi teorije, možda kroz znanstveni članak ili koncept.

---

### **TRL 2 — Technology concept formulated**

* Definiran je osnovni koncept i pristup, ali još nema eksperimentalne potvrde.

---

### **TRL 3 — Experimental proof of concept**

* Počinju laboratorijski eksperimenti.
* Dokazuje se da ideja *može funkcionirati* u praksi.

---

### **TRL 4 — Technology validated in lab**

* Tehnologija radi u kontroliranom laboratorijskom okruženju.
* Pojavljuju se prvi prototipovi.

---

### **TRL 5 — Technology validated in relevant environment**

* Testira se u uvjetima koji su slični stvarnom okruženju (npr. industrijska simulacija).

---

### **TRL 6 — Technology demonstrated in relevant environment**

* Prototip radi u realističnim uvjetima.
* Pokazuje se funkcionalnost i pouzdanost sustava.

---

### **TRL 7 — System prototype demonstration in operational environment**

* Prototip radi u stvarnom, operativnom okruženju (npr. u tvornici, na cesti, u stvarnim uvjetima).

---

### **TRL 8 — System complete and qualified**

* Sustav je dovršen, testiran i potvrđen da ispunjava sve tehničke zahtjeve.
* Spreman za masovnu proizvodnju ili implementaciju.

---

### **TRL 9 — Actual system proven in operational use**

* Tehnologija je *u stvarnoj upotrebi*.
* Dokazana u praksi, komercijalno dostupna i stabilna.

---

Za položit => napravit projektni plan i projektnu povelju
Waterfall, Agile, Lean, 6 Sigma ili neki drugi
Prezentiranje

Semninarski rad - prezentacija => nešto od ova 3 navedena
1 područje znanja prema PM procesnim grupama ili 1 PM procesne grupe
Opis 2 alata u Lean/Six sigma metodologiji + primjeri primjene
Opis alata iz Agile

Ima usmeni => aktivnost je bitna
Za seminare imamo spisak tema

Usmeni => online...ili termin predavanja ili neki random
Do 10 ljudi istovremeno

##########################
Time, money, scope
- trebaju biti izbalansirani da bi projekt bio kvalitetan
Triple constraint

Bitno je biti prilagodljiv promjenama

C = VxDxF > R
C -> change (promjena)
V -> a positive vision for future (pozitivna vizija budućnosti)
D -> dissatisfaction with status quo (nezadovoljstvo trenutnim stanjem)
F -> first steps (plan ostvarenja vizije - učiknoviti prvi koraci pri uvođenju promjene)
R -> natural human resistance to change (prirodan ljudski otpor na promjenu)

Produkt svega ovoga mora biti veći od otpora na promjene
"Ništa se ne dešava bez osobne transformacije"

Kreiranje ideje>Planiranje proizvoda>Razvoj proizvoda>Uvođenje na tržište>Praćenje proizvoda na tržištu>Relaunch proizvoda na tržištu>Praćenje proizvoda na tržištu>Eliminacija proizvoda

Projekti nose promjene => projekti unose promjene u organizaciju
Iz perspektive poslovanja, projekti su usmjereni  na pomicanje organizacije iz jednog (početnog) stanja u neko drugo (ciljno) stanje kako bi postigli svoje ciljeve
Organizacija treba pokretanja projekta odrediti svoje postojeće (početno) stanje kako bi bila u mogućnosti mjeriti svoj uspjeh u projektu

ROI => return of investment u ovemu slučaju (a ne region of interest :D )

Projekt => kreiranje poslovne vrijednosti
Isporuke mogu biti opipljive i neopipljive
Opipljive: money, stvari, alati, građevine, tržišni udio...
Neopipljive: reputacija, strateško usmjerenje, javno dobro, dobro raspoloženje, prepoznattljivost brenda...

Stakeholder u kontekstu projekta je bilo koja osoba, grupa ili organizacija koja ima interes u projektu ili može biti pogođena ishodom projekta
Projekt > Strategija > Misija i vizija
Koristimo projekte za ispuniti strategiju, a strategija služi da ostvarimo misiju i viziju

Projekti - sredstvo sa kojim organizacija reagira na faktore koji utječu na njeno poslovanje
Reakcija organizacije - cilj je uspješno implementirati promjene koje su potrebne za ptilagodbu tim faktorima s ciljem da se osigura kontinuitet i opstojnost
Faktori bi na kraju trebali imati jasnu vezu prema strateškim ciljevima organizacije i poslovne vrijednosti svakog pojedinog projekta

Portfelji, programi, projekti, operacije
Vpđenje programa i projekata fokusirano je na to da se ti programi i projekti vode na ispravan način ("right way")
Vođenje portfelja fokusirano je na to da se vode pravi programi i projekti ("right programs")

1) vodi projekte i programe na ispravan način
2) vodi portfelje tako da se sastoje od pravih programa i projekata

Najdi pametne stvari za delat  i delaj ih pametno

Upravljanje operacijama
Bavi se tekućom proizvodnjom proizvoda i/ili usluga
Osigurava da se tekuće poslovanje odvija efikasno uz optimalno korištenje resursa potrebnih da se ispune očekivanja korisnika

Upravljanje procesa kojima se ulazi u proces (sirovine, energija, novac, rad itd.) pretvaraju u izlaze iz procesa (proizvodi, poluproizvodi ili usluge)

Upravljanje programima => primjena znanja, vještina i principa u vođenju programa kako bi se postigli ciljevi i koristi programa koje ne bi bilo moguće postići vođenjem pojedinačnih projekata zasebno
Koordinacija više projekata istovremeno 
npr. Imamo projekt izrade baze, frontenda, backenda => treba ih orekstrirati u program

Portfelj => skup projekata, programa, potportfelja, potprograma i operacija koje se vode koordinirano s ciljem postizanja strateških ciljeva
Upravljanje portfeljem => centralizirano upravljanje 1 ili više portfelja s ciljem postizanja strateških ciljeva

Utjecaj organizacije na projekt => voditelj projekata surađuje s ostalim voditeljima projekata
Ostali nezaavisni projekti ili projekti koji su sastavni dio istog programa mogu značajno utjecati na naš projekt zbog (not exclusive...there's more):
- zahtjeva za istim resursima
- prioritetno budžetiranje (npr. koji ćemo prvi cuttat ako profali šoldi)
- primanje ili distribucija rezultata

primjer hijerarhije:
Predsjednik (CEO), potpredsjednik, članovi uprave, podjedinice/sektori, odjeli, odsjeci/grupe, radnici

Duboke organizacije => one organizacije di od najniže razine upravljanja do najviše razine upravljanja ima više od 4 stepenice

Voditelj projekta je nekamo između odjela i podjedinice

Funkcionalna organizacijka struktura => predsjednik>više direktora podjedinica>ispod svakog direktora podjedinice su radnici
Svaki radnik ima jednog jedinog nadređenog
Radnicu su grupirani na najvišem nivou prema specijalnostima (proizvodnja, prodaja, marketing, razvoj, obračun, naplate)
Projekti se odvijaju unutar odjela i neovisni su o drugim projektima

Slaba matrica => netko od radnika se proglasni koordinatorom
Ulgoa voditelja projekta je više kao koordinator aktivnosti nego kao pravi voditelj projekta (sve bitno se odredi "gore" u hijerarhiji, a netko sa niže razine to samo koordinira)

Balansirana matrica => voditelj projekta nema potpunu kontrolu nad projektom niti nad budžetom projekta

Jaka matrica => velike sličnosti s projektnim organizacijama
mogu imati profesionalne voditelje projekata koji imaju velik autoritet i administrativnu snagu koja je stalno zaposlena na projektu

Projektna => podjela po projektima => svaki projekt ima svojeg voditelja i radnike na njemu
(npr. toyota za svaki model auta ima svoj projekt)
Točno se zna ki odgovara za koji projekt
Članovi tima najčešće na istoj lokaciji
Večina resursa organizacije => rad s projetima

Kompozitna => miš maš
kombinacija svih spomeutih
mnogo karakteristika projektnog tima
Stalno zaposleni iz funkcionlanlih odjela 
Razvoj vlastitog skupa procesa i procedura
rad izvan standardne i formalne hijerarhijske strukture

Voditelj projekta => vodi tim i odgovoran je za upravljanje projektom, kako bi se postigli projektni ciljevi i ispunila očekivanja dionika
Koristi znanje, sposobnost i autoritet za planiranje i kontrolu projketa
Davanje smjera i prezentiranje vizije uspjeha projekta
Balans između ograničavajućih faktora (opseg, vrijeme, troškovi => trostuko ograničenje)
Jedinstvena točka za kontakt u vezi s projektom (single point of contact)

Sponzor projekta => osoba koja očekuje benfit od projekta
Postavlja ciljeve i očekivanja projekta.

Odobrava budžet i resurse.

Prati napredak i pomaže u uklanjanju većih prepreka.

Na kraju, određuje uspjeh projekta u smislu poslovnih ili strateških ciljeva.

PM (voditelj projekta) je često jedinstvena kontakt točka => s jedne strane: rukovodstvo, projektni tim, financije, it, dobavljači, s druge strane: klijent, linijski voditelj, sponzor projekta, sigurnost, pravna/regulatorna pitanja. projektni audit

Životni ciklus projekta: početak projekta, organizacija i priprema, rad na projektu, zatvaranje projekta => generičke faze

Okoline u kojima se odvijaju projekti: 
faktori okruženja kompanije (EEF, Entetprise environmental factors) => unutar i izvan organizacije
imovina organizacijskih procesa (OPA, organizational process assets) => procesi politike i procedure, organizacijska baza znanja
organizacijski sustavi (OS, organizational systems) => okviri vođenja poslovanja, elementi upravljanja, org. strukture

Organizacijska baza znanja => lessons learned nakon svakog projekta
4 tipa projekta:
vidit na ppt...ne znan izvuć niš suvislo van :D

WBS => aktivnosti i milestonesi
Work breakdown structure
Gantogram (Gantt Chart)


---

### **WBS (Work Breakdown Structure)**

To je **hijerarhijski prikaz projekta** — razbijaš cijeli projekt na **manje, upravljive dijelove (zadaće i podzadaće)**.
Cilj: da **ništa ne promakne** i da se **točno zna tko što radi i kada**.

Primjer:
Projekt: *Izrada web aplikacije*

1. Planiranje
    1.1. Analiza zahtjeva
    1.2. Definicija specifikacija
2. Dizajn
    2.1. UI/UX dizajn
    2.2. Arhitektura sustava
3. Implementacija
    3.1. Frontend
    3.2. Backend
4. Testiranje
5. Deploy

→ Dakle, WBS = **struktura posla**, temelj za planiranje resursa i vremena.

Aktivnosti i milestonesi
---

### **Gantogram (Gantt Chart)**

To je **vremenski raspored aktivnosti** prikazan **grafički** (najčešće kao vodoravne trake).
Os x = vrijeme,
Os y = zadaci.

Svaka traka pokazuje **kad zadatak počinje, koliko traje i kad završava**.
Možeš vidjeti i **ovisnosti** između zadataka (npr. Backend se ne može testirati dok nije završen).

Primjer:

```
Zadatak           | Početak | Trajanje | Vizualno
Analiza zahtjeva  | Dan 1   | 5 dana   | █████
Dizajn            | Dan 6   | 7 dana   |      ███████
Implementacija    | Dan 13  | 10 dana  |           ██████████
```

→ Dakle, Gantogram = **vremenska vizualizacija plana rada**, pomaže pratiti napredak.

---

Ukratko:

* **WBS = što sve treba napraviti (struktura posla)**
* **Gantogram = kada se što radi (vremenski raspored)**


---

### **Aktivnost (Activity)**

* To je **zadatak koji se mora obaviti**.
* **Traje neko vrijeme** (npr. 3 dana, 1 tjedan...).
* Ima **resurse** (ljude, opremu, trošak).

**Primjer:** “Implementirati login sustav” → traje 5 dana.

---

### **Milestone (Prekretnica)**

* To je **točka u vremenu**, **nema trajanje**.
* Označava **važan događaj ili završetak faze**.
* Koristi se za **praćenje napretka** i **provjeru ciljeva**.

**Primjer:** “Završena implementacija modula za login” → trenutak kada aktivnost završi.

---

**Ukratko:**

* **Aktivnost = radi se (ima trajanje)**
* **Milestone = postignuto (nema trajanje)**

Postoci => postotak dovršenosti => koliko % je odrađena faza
Ako je svuda 0, onda znači da nije ni krenuo

Veze između aktivnosti:
FS => finish, start => druga aktivnost može krenuti kada je prva gotova
SS => start, start => i prva i druga aktivnost kreću istovremeno
FF => finish, finish => obadvije aktivnosti trebaju završiti istovremeno
####### MUY IMPORTANTE ###########
Critical path => vidimo koje aktivnosti su ključne...koje ne smiju kasniti => te aktivnosti utječu na ukupnu trajanje projekta
Slack => aktivnosti koje nisu na kritičnom putu => smiju malo kasniti
##################################

Waterfall
Analyze, plan, design, build, test, deploy

---

### 💧 **Waterfall model (vodopadni pristup)** => ima jako puno dokumentacije i papirologije

To je **sekvencijalni model razvoja projekta ili softvera** — ideš **korak po korak**, svaka faza mora biti **završena prije nego kreneš na sljedeću**.
Zamisli vodopad: voda (informacija) teče samo **u jednom smjeru – prema dolje**.

---

## **1. Analyze (Analiza)**

* Prva i najkritičnija faza.
* Prikupljaš **zahtjeve klijenta** i definiraš **što točno treba sustav raditi**.
* Dokumentiraš sve (funkcionalne i nefunkcionalne zahtjeve).

**Cilj:** svi znaju *što* gradimo i *zašto*.
**Output:** dokument specifikacija zahtjeva (SRS).

---

## **2. Plan (Planiranje)**

* Definiraš **vremenski plan (Gantt), resurse, troškove i rokove**.
* Raspoređuješ aktivnosti i timove.
* Planiraš rizike i kontrolne točke (milestone-e).

**Cilj:** imati realan plan koji vodi do gotovog proizvoda.

---

## **3. Design (Dizajn)**

* Razrađuješ **arhitekturu sustava** i **UI/UX izgled**.
* Dizajniraš baze podataka, module, API-je.
* Iz analize prelaziš u konkretne tehničke odluke.

**Cilj:** imati jasan nacrt *kako* će se sustav izgraditi.

---

## **4. Build (Izgradnja / Implementacija)**

* Programeri kreću s **kodiranjem prema dizajnu**.
* Sustav se razvija dio po dio.

**Cilj:** izgraditi funkcionalan softver koji ispunjava sve zahtjeve.

---

## **5. Test (Testiranje)**

* Provjerava se ispravnost sustava.
* Radi se **unit test, integration test, system test, acceptance test**.
* Cilj je pronaći bugove i potvrditi da sve radi kako treba.

**Cilj:** osigurati kvalitetu prije puštanja u produkciju.

---

## **6. Deploy (Implementacija / Puštanje u rad)**

* Sustav se **isporučuje korisniku** ili ide u **produkcijsko okruženje**.
* Ponekad uključuje i **obuku korisnika** i **održavanje**.

**Cilj:** da softver živi i radi u stvarnom svijetu.

---

### **Ključne karakteristike Waterfall modela:**

✅ Jasna struktura (sve je definirano unaprijed)
✅ Lako upravljanje velikim, stabilnim projektima
❌ Slaba fleksibilnost (ako kasno skužiš grešku – teško ju je popraviti)
❌ Nije pogodan za projekte gdje se zahtjevi mijenjaju

---

**Kada koristiti Waterfall?**

* Kad su **zahtjevi fiksni i dobro poznati**.
* Kad postoji **stroga dokumentacija i regulativa** (npr. bankarstvo, medicina).
* Kad želiš **jasne faze i kontrolu nad napretkom**.

---

---

## ⚡ **Agile (Agilni pristup razvoju softvera)** => super ako se korisnik predomišlja

To je **iterativni i inkrementalni pristup** — projekt se ne radi odjednom, nego u **malim dijelovima (iteracijama)** koji stalno donose *nešto funkcionalno* i *korisno*.
Umjesto da čekaš kraj projekta da vidiš rezultat — **imaš rezultat svakih par tjedana**.

---

### **Osnovna filozofija Agile-a:**

* Ljudi i komunikacija važniji su od procesa i alata.
* Funkcionalni softver važniji je od dokumentacije.
* Suradnja s korisnikom važnija je od formalnog ugovora.
* Reakcija na promjene važnija je od slijepe izvedbe plana.

*(To je doslovno srž “Agile manifesta”.)*

---

## 🔁 **Kako to izgleda u praksi**

Projekt se dijeli na **sprintove** (tipično 1–4 tjedna).
Svaki sprint prolazi mini verziju “analyze → design → build → test → deliver”.
Na kraju svakog sprinta imaš **gotov, testiran i isporučiv dio proizvoda**.

Znači:
umjesto “napravi sve pa testiraj”, ideš “napravi mali dio, pokaži, ispravi, nastavi dalje”.

---

## 🧩 **Agile tim i uloge (Scrum varijanta najčešća)**

* **Product Owner** – definira *što korisniku treba*, postavlja prioritete.
* **Scrum Master** – vodi tim, rješava prepreke, čuva proces “agilnim”.
* **Development Team** – programeri, dizajneri, testeri koji *rade posao*.

---

## 📅 **Glavne ceremonije (Scrum rutina)**

1. **Sprint Planning** – dogovor što će se raditi u idućem sprintu.
2. **Daily Stand-up** – kratki dnevni sastanak (15 min): što si radio, što ćeš, imaš li blokadu.
3. **Sprint Review** – pokazuješ klijentu što je gotovo.
4. **Sprint Retrospective** – tim analizira kako može raditi bolje u sljedećem sprintu.

---

## ✅ **Prednosti Agile pristupa**

* Fleksibilan — lako reagiraš na promjene.
* Brz feedback — klijent vidi napredak svakih par tjedana.
* Više motivacije u timu (stalni osjećaj napretka).
* Manji rizik — problemi se otkriju rano.

---

## ❌ **Nedostaci Agile-a**

* Manje formalne dokumentacije.
* Teže procijeniti točan budžet i rokove.
* Nije idealan za jako velike, strogo regulirane sustave.

---

### **Waterfall vs Agile — usporedno:**

| Element       | Waterfall          | Agile                  |
| ------------- | ------------------ | ---------------------- |
| Pristup       | Sekvencijalni      | Iterativni             |
| Promjene      | Teško ih je uvesti | Lako se prilagođava    |
| Isporuka      | Na kraju projekta  | Nakon svakog sprinta   |
| Dokumentacija | Detaljna           | Minimalna              |
| Klijent       | Uključen malo      | Uključen stalno        |
| Rizik         | Viši               | Niži (stalni feedback) |

---

**Ukratko:**
➡️ *Waterfall* = plan, pa izvedba, pa test — sve u fazama.
➡️ *Agile* = brzo, po komadićima, stalno isporučuješ i poboljšavaš.

---

Agile=> requirements change, customer turnover, technology innovation => waterfall to ne voli jer se ne moreš vraćat nazad

Definition of done => unutar tima se treba dogovorit ča točno znači "bit gotov"
Zadovoljiti klijenta
Dobrodošli promjenjivi zahtjevi
Česta isporuka
Suradnja
Motivirani pojedinci
Razgovori licem u lice
Working software je mjerilo napretka
Održivi razvoj
Jednostavnost

Teorija Scrum-a
Iskustvena (empirijska) kontrola procesa => znanje proizlazi iz iskustva i donošenja odluka na temelju poznatog
Iterativni, inkrementalni pristup => optimizacija predvidljivosti i kontrole rizika

3 stupa
Transparentnost => zajednički jezik među svim sudionicima, zajedničko razumjevanje onoga što se komunicira (definition of done)
Inspekcija => neprestana provjera Scrum artefakata i napretka prema cilju sprinta-a
Prilagodba => ukoliko se tijekom inspekcije ustvanovi da neki aspekt procesa odstupa izvan prihvatljivih granica, uzrokujući da će konačan proizvod biti neprihvatljiv, proces ili materijal je potrebno prilagoditi da bi se izbjegao takav ishod

##### procijenit ča smo loše odradili je bitno

Scrum team => product owner, development team i scrum master
samoorganizirajući, krosfunkcionalni tim koji samostalno odlučuje kako da najbolje odradi zadan posao
članovi moraju imati odgovarajuće kompetencije potrebne za odradu zadanog posla bez potrebe da se oslanjaju na osobe koje nisu članovi tima
iterativno i inkrementalno isporučivanje produkata + maksimizacija prilike za povratnu informaciju klijenta/korisnika
inkrementalne isporuke od "done" produkta/funkcionalnosti da budu uvijek dostupnne kao potencijalno upotrebljive verzije radnog proizvoda/funkcionalnosti
Korisnik inkrementalno dobiva komad proizvoda na kraju sprinta => prilika da da svoj feedback

Product owner
Osoba koja točno zna koji su zahtjevi i potrebni koraci razvoja
1 osoba
Točno zna koji su requirementsi
odlučuje što treba učiniti i dalje razvojnom timu ciljeve
maksimiziranje vrijednosti proizvoda i vrijednosti rada tima
nadležan za donošenje odluka => odobrenje svake promjene u njegovoj odgovornosti
vidljivost i transparentnost product backloga => ča se trenutno razvija i ča će se dalje razvijat
informira razvojni tim da znaju ča točno treba delat
upravlja backlogom

---

## 🧱 **Product Backlog – što je to?**

To je **popis svih stvari koje treba napraviti** da bi se proizvod (app, sustav, softver) razvio.
Doslovno: **“to-do lista cijelog projekta”**, ali **stalno se mijenja i nadograđuje**.

---

## 🔍 **Tko ga vodi?**

👉 **Product Owner** je “vlasnik” backloga.
On dodaje nove zahtjeve, prioritizira ih i ažurira kako projekt napreduje.

---

## 📋 **Što se sve nalazi unutra?**

Svaka stavka se zove **Product Backlog Item (PBI)**, i može biti:

* **User story** – npr. “Kao korisnik želim resetirati lozinku.”
* **Bug** – npr. “Login puca ako unesem prazno polje.”
* **Task** – npr. “Dodati validaciju email adrese.”
* **Feature / Epic** – veći dijelovi funkcionalnosti.

---

## 🧩 **Kako funkcionira**

1. **Na početku** imaš grubu listu ideja/zahtjeva.
2. **Product Owner** ih razrađuje i daje prioritet (što je najvažnije prvo).
3. Na **Sprint Planningu**, tim uzima **top stavke** iz Product Backloga i prebacuje ih u **Sprint Backlog** (to je lista za taj sprint).
4. Nakon sprinta, backlog se **ažurira** — dodaju se nove ideje, neke stavke se brišu ili dorađuju.

---

## 🎯 **Ključne karakteristike**

* **Dinamičan je** – stalno raste i mijenja se.
* **Prioritiziran** – najvažnije stavke su uvijek gore.
* **Vidljiv svima** – cijeli tim zna što slijedi.
* **Ne mora biti kompletan** – razvija se tijekom projekta.

---

**Ukratko:**
➡️ **Product Backlog = glavni popis svega što se želi u proizvodu.**
➡️ **Sprint Backlog = ono što tim konkretno radi u tekućem sprintu.**

---

Razvojni tim
Profesionalci koji rade inkrement od "done" na kraju svakog sprinta
samoorganizirajući + podrška managementa da samostalno odlučuje i upravlja svojim radom
nitko im nije ovlašten govoriti kako da rade
sve kompetencije koje su potrebne za kreiranje inkrementa produkta/funkcionalnosti
nema podtimova; svaki član ima ulogu developera
pojedini članovi imaju određene vještine, ali odgovornost je na cijelom timu

Scrum master
Osoba koja je odgovorna da tim razumije scrum, da provodi scrum i da ga se poštoje
Uslužni voditelj tima
U agilnom vođenju projketa nema voditelja projekta kakvog poznajemo u waterfallu
Scrum master pomaže osobama izvan scrum tima da razumiju koje interakcije sa scrum timom su korisne timu, a koje nisu
Pomaže svim prilagoditi svoju komunikacijus ciljem maksimiziranja vrijendosti koju kreira tim
Služi svima: owneru, timu i organizaciji
